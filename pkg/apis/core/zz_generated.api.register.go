/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package core

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalMyResource = builders.NewInternalResource(
		"myresources",
		"MyResource",
		func() runtime.Object { return &MyResource{} },
		func() runtime.Object { return &MyResourceList{} },
	)
	InternalMyResourceStatus = builders.NewInternalResourceStatus(
		"myresources",
		"MyResourceStatus",
		func() runtime.Object { return &MyResource{} },
		func() runtime.Object { return &MyResourceList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("core.hawq.org").WithKinds(
		InternalMyResource,
		InternalMyResourceStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MyResource struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   MyResourceSpec
	Status MyResourceStatus
}

type MyResourceSpec struct {
	Needs int32
}

type MyResourceStatus struct {
	Alloc int32
}

//
// MyResource Functions and Structs
//
// +k8s:deepcopy-gen=false
type MyResourceStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type MyResourceStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MyResourceList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []MyResource
}

func (MyResource) NewStatus() interface{} {
	return MyResourceStatus{}
}

func (pc *MyResource) GetStatus() interface{} {
	return pc.Status
}

func (pc *MyResource) SetStatus(s interface{}) {
	pc.Status = s.(MyResourceStatus)
}

func (pc *MyResource) GetSpec() interface{} {
	return pc.Spec
}

func (pc *MyResource) SetSpec(s interface{}) {
	pc.Spec = s.(MyResourceSpec)
}

func (pc *MyResource) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *MyResource) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc MyResource) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store MyResource.
// +k8s:deepcopy-gen=false
type MyResourceRegistry interface {
	ListMyResources(ctx request.Context, options *internalversion.ListOptions) (*MyResourceList, error)
	GetMyResource(ctx request.Context, id string, options *metav1.GetOptions) (*MyResource, error)
	CreateMyResource(ctx request.Context, id *MyResource) (*MyResource, error)
	UpdateMyResource(ctx request.Context, id *MyResource) (*MyResource, error)
	DeleteMyResource(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewMyResourceRegistry(sp builders.StandardStorageProvider) MyResourceRegistry {
	return &storageMyResource{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageMyResource struct {
	builders.StandardStorageProvider
}

func (s *storageMyResource) ListMyResources(ctx request.Context, options *internalversion.ListOptions) (*MyResourceList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MyResourceList), err
}

func (s *storageMyResource) GetMyResource(ctx request.Context, id string, options *metav1.GetOptions) (*MyResource, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MyResource), nil
}

func (s *storageMyResource) CreateMyResource(ctx request.Context, object *MyResource) (*MyResource, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*MyResource), nil
}

func (s *storageMyResource) UpdateMyResource(ctx request.Context, object *MyResource) (*MyResource, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*MyResource), nil
}

func (s *storageMyResource) DeleteMyResource(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
